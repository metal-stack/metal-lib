// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// testClient is an autogenerated mock type for the testClient type
type testClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: rq
func (_m *testClient) Create(rq *genericcli.testCreate) (*genericcli.testResponse, error) {
	ret := _m.Called(rq)

	var r0 *genericcli.testResponse
	if rf, ok := ret.Get(0).(func(*genericcli.testCreate) *genericcli.testResponse); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*genericcli.testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*genericcli.testCreate) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *testClient) Delete(id string) (*genericcli.testResponse, error) {
	ret := _m.Called(id)

	var r0 *genericcli.testResponse
	if rf, ok := ret.Get(0).(func(string) *genericcli.testResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*genericcli.testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *testClient) Get(id string) (*genericcli.testResponse, error) {
	ret := _m.Called(id)

	var r0 *genericcli.testResponse
	if rf, ok := ret.Get(0).(func(string) *genericcli.testResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*genericcli.testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *testClient) List() ([]*genericcli.testResponse, error) {
	ret := _m.Called()

	var r0 []*genericcli.testResponse
	if rf, ok := ret.Get(0).(func() []*genericcli.testResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*genericcli.testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: rq
func (_m *testClient) Update(rq *genericcli.testUpdate) (*genericcli.testResponse, error) {
	ret := _m.Called(rq)

	var r0 *genericcli.testResponse
	if rf, ok := ret.Get(0).(func(*genericcli.testUpdate) *genericcli.testResponse); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*genericcli.testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*genericcli.testUpdate) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewTestClient interface {
	mock.TestingT
	Cleanup(func())
}

// newTestClient creates a new instance of testClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newTestClient(t mockConstructorTestingTnewTestClient) *testClient {
	mock := &testClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
