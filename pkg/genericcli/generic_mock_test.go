// Code generated by mockery v2.14.0. DO NOT EDIT.

package genericcli

import mock "github.com/stretchr/testify/mock"

// mockTestClient is an autogenerated mock type for the testClient type
type mockTestClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: rq
func (_m *mockTestClient) Create(rq *testCreate) (*testResponse, error) {
	ret := _m.Called(rq)

	var r0 *testResponse
	if rf, ok := ret.Get(0).(func(*testCreate) *testResponse); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*testCreate) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *mockTestClient) Delete(id string) (*testResponse, error) {
	ret := _m.Called(id)

	var r0 *testResponse
	if rf, ok := ret.Get(0).(func(string) *testResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *mockTestClient) Get(id string) (*testResponse, error) {
	ret := _m.Called(id)

	var r0 *testResponse
	if rf, ok := ret.Get(0).(func(string) *testResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetID provides a mock function with given fields: r
func (_m *mockTestClient) GetID(r *testResponse) (string, error) {
	ret := _m.Called(r)

	var r0 string
	if rf, ok := ret.Get(0).(func(*testResponse) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*testResponse) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *mockTestClient) List() ([]*testResponse, error) {
	ret := _m.Called()

	var r0 []*testResponse
	if rf, ok := ret.Get(0).(func() []*testResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToCreate provides a mock function with given fields: r
func (_m *mockTestClient) ToCreate(r *testResponse) (*testCreate, error) {
	ret := _m.Called(r)

	var r0 *testCreate
	if rf, ok := ret.Get(0).(func(*testResponse) *testCreate); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testCreate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*testResponse) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToUpdate provides a mock function with given fields: r
func (_m *mockTestClient) ToUpdate(r *testResponse) (*testUpdate, error) {
	ret := _m.Called(r)

	var r0 *testUpdate
	if rf, ok := ret.Get(0).(func(*testResponse) *testUpdate); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testUpdate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*testResponse) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: rq
func (_m *mockTestClient) Update(rq *testUpdate) (*testResponse, error) {
	ret := _m.Called(rq)

	var r0 *testResponse
	if rf, ok := ret.Get(0).(func(*testUpdate) *testResponse); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*testUpdate) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockTestClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockTestClient creates a new instance of mockTestClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockTestClient(t mockConstructorTestingTnewMockTestClient) *mockTestClient {
	mock := &mockTestClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
