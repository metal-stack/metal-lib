// Code generated by mockery v2.45.1. DO NOT EDIT.

package genericcli

import mock "github.com/stretchr/testify/mock"

// mockTestClient is an autogenerated mock type for the testClient type
type mockTestClient struct {
	mock.Mock
}

// Convert provides a mock function with given fields: r
func (_m *mockTestClient) Convert(r *testResponse) (string, *testCreate, *testUpdate, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 string
	var r1 *testCreate
	var r2 *testUpdate
	var r3 error
	if rf, ok := ret.Get(0).(func(*testResponse) (string, *testCreate, *testUpdate, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*testResponse) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*testResponse) *testCreate); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*testCreate)
		}
	}

	if rf, ok := ret.Get(2).(func(*testResponse) *testUpdate); ok {
		r2 = rf(r)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*testUpdate)
		}
	}

	if rf, ok := ret.Get(3).(func(*testResponse) error); ok {
		r3 = rf(r)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Create provides a mock function with given fields: rq
func (_m *mockTestClient) Create(rq *testCreate) (*testResponse, error) {
	ret := _m.Called(rq)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *testResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*testCreate) (*testResponse, error)); ok {
		return rf(rq)
	}
	if rf, ok := ret.Get(0).(func(*testCreate) *testResponse); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*testCreate) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *mockTestClient) Delete(id ...string) (*testResponse, error) {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *testResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (*testResponse, error)); ok {
		return rf(id...)
	}
	if rf, ok := ret.Get(0).(func(...string) *testResponse); ok {
		r0 = rf(id...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(id...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *mockTestClient) Get(id ...string) (*testResponse, error) {
	_va := make([]interface{}, len(id))
	for _i := range id {
		_va[_i] = id[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *testResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (*testResponse, error)); ok {
		return rf(id...)
	}
	if rf, ok := ret.Get(0).(func(...string) *testResponse); ok {
		r0 = rf(id...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(id...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *mockTestClient) List() ([]*testResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*testResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*testResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*testResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*testResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: rq
func (_m *mockTestClient) Update(rq *testUpdate) (*testResponse, error) {
	ret := _m.Called(rq)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *testResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*testUpdate) (*testResponse, error)); ok {
		return rf(rq)
	}
	if rf, ok := ret.Get(0).(func(*testUpdate) *testResponse); ok {
		r0 = rf(rq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*testUpdate) error); ok {
		r1 = rf(rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockTestClient creates a new instance of mockTestClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTestClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTestClient {
	mock := &mockTestClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
